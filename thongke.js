document.addEventListener("DOMContentLoaded", () => {
  // H√†m l·∫•y d·ªØ li·ªáu t·ª´ localStorage
  function loadBooks() {
    const raw = localStorage.getItem('books');
    return raw ? JSON.parse(raw) : [];
  }
  
  function loadLoans() {
    const raw = localStorage.getItem('loans');
    return raw ? JSON.parse(raw) : [];
  }

  const books = loadBooks();
  const loans = loadLoans();

  console.log('üìö Books loaded:', books.length);
  console.log('üìñ Loans loaded:', loans.length);

  // 1. Th·ªëng k√™ theo lo·∫°i s√°ch (t·ª´ d·ªØ li·ªáu th·ª±c)
  const typeCount = {};
  books.forEach(book => {
    const type = book.type || 'Kh√°c';
    typeCount[type] = (typeCount[type] || 0) + 1;
  });

  const typeLabels = Object.keys(typeCount);
  const typeData = Object.values(typeCount);
  const typeColors = ['#3498db', '#9b59b6', '#f1c40f', '#e67e22', '#2ecc71', '#e74c3c', '#1abc9c'];

  const ctx1 = document.getElementById("chartByType");
  if (ctx1) {
    new Chart(ctx1, {
      type: "bar",
      data: {
        labels: typeLabels,
        datasets: [{
          label: "S·ªë l∆∞·ª£ng s√°ch",
          data: typeData,
          backgroundColor: typeColors.slice(0, typeLabels.length),
          borderRadius: 8,
          borderWidth: 0
        }]
      },
      options: { 
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          },
          title: {
            display: false
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              stepSize: 1,
              font: {
                size: 12
              }
            },
            grid: {
              color: '#f1f1f1'
            }
          },
          x: {
            ticks: {
              font: {
                size: 13
              }
            },
            grid: {
              display: false
            }
          }
        }
      }
    });
    console.log('‚úÖ Chart created');
  } else {
    console.error('‚ùå chartByType not found');
  }

  // 2. Top 5 s√°ch m∆∞·ª£n nhi·ªÅu (t·ª´ d·ªØ li·ªáu th·ª±c)
  const borrowCount = {};
  
  loans.forEach(loan => {
    const title = loan.bookTitle;
    borrowCount[title] = (borrowCount[title] || 0) + 1;
  });

  // T·∫°o m·∫£ng v√† s·∫Øp x·∫øp theo s·ªë l∆∞·ª£t m∆∞·ª£n
  const topBooks = Object.entries(borrowCount)
    .map(([title, count]) => {
      const book = books.find(b => b.title === title);
      return {
        title: title,
        author: book ? book.author : 'N/A',
        borrow: count
      };
    })
    .sort((a, b) => b.borrow - a.borrow)
    .slice(0, 5);

  const tbody = document.getElementById("topBooksTable");
  
  if (tbody) {
    if (topBooks.length === 0) {
      tbody.innerHTML = '<tr><td colspan="4" class="empty-state">Ch∆∞a c√≥ d·ªØ li·ªáu m∆∞·ª£n s√°ch</td></tr>';
    } else {
      tbody.innerHTML = topBooks.map((b, i) => `
        <tr>
          <td>${i + 1}</td>
          <td>${b.title}</td>
          <td>${b.author}</td>
          <td>${b.borrow}</td>
        </tr>
      `).join('');
    }
    console.log('‚úÖ Table updated with', topBooks.length, 'books');
  } else {
    console.error('‚ùå topBooksTable not found');
  }

  // 3. C·∫≠p nh·∫≠t th·ªëng k√™ t·ªïng quan
  updateOverviewStats(books, loans);

  // 4. L·∫Øng nghe s·ª± ki·ªán storage ƒë·ªÉ c·∫≠p nh·∫≠t real-time
  window.addEventListener('storage', (e) => {
    if (e.key === 'books' || e.key === 'loans') {
      console.log('üîÑ Storage changed, reloading...');
      location.reload();
    }
  });
});

// H√†m c·∫≠p nh·∫≠t th·ªëng k√™ t·ªïng quan
function updateOverviewStats(books, loans) {
  const totalBooks = books.length;
  const availableBooks = books.filter(b => b.status === 'C√≥ s·∫µn').length;
  const borrowedBooks = books.filter(b => b.status === 'ƒêang m∆∞·ª£n').length;
  const activeLoanCount = loans.filter(l => !l.isReturned).length;

  console.log('üìä Stats:', { totalBooks, availableBooks, borrowedBooks, activeLoanCount });

  // C·∫≠p nh·∫≠t c√°c ph·∫ßn t·ª≠ HTML n·∫øu t·ªìn t·∫°i
  const totalEl = document.getElementById('totalBooks');
  const availableEl = document.getElementById('availableBooks');
  const borrowedEl = document.getElementById('borrowedBooks');
  const activeLoansEl = document.getElementById('activeLoans');

  if (totalEl) totalEl.textContent = totalBooks;
  if (availableEl) availableEl.textContent = availableBooks;
  if (borrowedEl) borrowedEl.textContent = borrowedBooks;
  if (activeLoansEl) activeLoansEl.textContent = activeLoanCount;
  
  console.log('‚úÖ Overview stats updated');
}